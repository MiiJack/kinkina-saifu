openapi: 3.0.3
info:
  title: KinkinaSaifu API
  version: 1.1.0
  description: STD22079 - STD22028
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: Accounts
    description: Account related endpoint
  - name: Transactions
    description: Transaction related endpoint
paths:
  /account:
    get:
      tags:
        - Accounts
      summary: Returns a list of all accounts
      operationId: getAllAccount
      parameters:
        - $ref: "#/components/parameters/queryPage"
        - $ref: "#/components/parameters/queryPageSize"
      responses:
        '200':
          $ref: '#/components/responses/OK200Account'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    put:
      tags:
        - Accounts
      summary: Create or update an (list of) account
      operationId: crupdateAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          $ref: '#/components/responses/OK200Account'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /account/{id}:
    get:
      tags:
        - Accounts
      summary: Returns an account by id
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/OK200Account'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /transaction:
    get:
      tags:
        - Transactions
      summary: Returns a list of all transactions
      operationId: getAllTransactions
      parameters:
        - $ref: "#/components/parameters/queryPage"
        - $ref: "#/components/parameters/queryPageSize"
      responses:
        '200':
          $ref: '#/components/responses/OK200Transaction'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    put:
      tags:
        - Transactions
      summary: Create or update a (list of) transaction
      operationId: crupdateTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          $ref: '#/components/responses/OK200Transaction'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

  /transaction/{id}:
    get:
      tags:
        - Transactions
      summary: Returns a transaction by id
      operationId: getTransactionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/OK200Transaction'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

    delete:
      tags:
        - Transactions
      summary: Deletes a transaction by id
      operationId: deleteTransactionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/OK200Transaction'
        '400':
          $ref: '#/components/responses/BadRequest400'
        '403':
          $ref: '#/components/responses/Forbidden403'
        '500':
          $ref: '#/components/responses/InternalServerError500'

components:
  responses:
    OK200Account:
      description: The request has succeeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponseAccount'

    OK200Transaction:
      description: The request has succeeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SuccessResponseTransaction'

    BadRequest400:
      description: The server cannot process the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status:
              code: 400
              message: "Bad request"
            body:
              error: "Invalid input data"

    Forbidden403:
      description: The server refused the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status:
              code: 403
              message: "Forbidden"
            body:
              error: "Access denied"

    InternalServerError500:
      description: The server encountered an unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status:
              code: 500
              message: "Internal server error"
            body:
              error: "An unexpected error occurred on the server"

  parameters:
    queryPage:
      name: page
      in: query
      required: false
      schema:
        description: "Page number for pagination. Used as 1 by default if no value is provided."
        type: integer
        default: 1

    queryPageSize:
      name: pageSize
      in: query
      required: false
      schema:
        description: "Number of items per page. Used as 50 by default if no value is provided."
        type: integer
        default: 50

  schemas:
    Response:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
              example: 200
            message:
              type: string
              example: "The request has succeeded"
        body:
          type: object

    SuccessResponseAccount:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Account'

    SuccessResponseTransaction:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Transaction'

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            body:
              type: object
              properties:
                error:
                  type: string

    Account:
      type: object
      properties:
        id:
          type: integer
        principalCurrency:
          $ref: '#/components/schemas/Currency'
        name:
          type: string
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        type:
          type: string
          enum: [Bank, Cash, Mobile Money]

    Transaction:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        amount:
          type: number
        dateTime:
          type: string
          format: date-time
        transactionType:
          type: string
          enum: [debit, credit]

    Currency:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        code:
          allOf:
            - $ref: '#/components/schemas/CurrencyCode'

    CurrencyCode:
      type: string
      enum:
        - USD
        - EUR
        - JPY
        - GBP
        - CAD
        - MGA